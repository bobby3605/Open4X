#version 460

layout(constant_id = 0) const uint LOCAL_SIZE_X = 1;
layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

struct DrawCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 0) readonly buffer indirect_commands { DrawCommand drawCommands[]; };
layout(set = 0, binding = 1) readonly buffer indirect_count { uint indirectDrawCount; };
layout(set = 0, binding = 2) coherent buffer CulledIndirectCount { uint culledDrawIndirectCount; };
layout(set = 0, binding = 3) buffer CulledDrawCommands { DrawCommand culledDrawCommands[]; };
layout(set = 0, binding = 4) buffer PrefixSum { uint prefixSum[]; };
layout(set = 0, binding = 5) buffer MaterialIndices { uint materialIndices[]; };
layout(set = 0, binding = 6) buffer CulledMaterialIndices { uint culledMaterialIndices[]; };

uint visibleInstances(uint di) {
    /*
    instances = [2,4,5,3,6,...]
    [0,1,1,0,1,1,1,0,0,0,1] = isVisible(instance)
    [0,1,2,2,3,4,5,5,5,5,6] = prefixSum
    drawCommand1.firstInstance = 2
    drawCommand1.instanceCount = 3
        [2,2,3]
    drawCommand0 = drawCommands[draw_index - 1]
    drawCommand0.firstInstance = 0
    drawCommand0.instanceCount = 2
        [0, 1]

    tmp = prefixSum[drawCommand0.firstInstance + drawCommand0.instanceCount]
    tmp2 = prefixSum[drawCommand1.firstInstance + drawCommand1.instanceCount]
    drawCommand1.instanceCount = tmp2 - tmp;
    drawCommand1.instanceCount = 2;

    prefixSum[drawCommand1.firstInstance + drawCommand1.instanceCount] - prefixSum[drawCommand1.firstInstance] + 1
    */

    DrawCommand draw_cmd = drawCommands[di];
    return prefixSum[draw_cmd.firstInstance + draw_cmd.instanceCount] - prefixSum[draw_cmd.firstInstance];
}

void main() {
    uint drawIndex = gl_GlobalInvocationID.x;
    if (drawIndex >= indirectDrawCount) {
        return;
    }
    uint visibleInstanceCount = visibleInstances(drawIndex);
    if (visibleInstanceCount > 0) {
        DrawCommand drawCommand = drawCommands[drawIndex];
        drawCommand.instanceCount = visibleInstanceCount;
        // NOTE:
        // convert to buffer index with - 1
        if (drawCommand.firstInstance != 0) {
            uint newIndex = prefixSum[drawCommand.firstInstance - 1];
            culledMaterialIndices[newIndex] = materialIndices[drawCommand.firstInstance];
            drawCommand.firstInstance = newIndex;
        } else {
            culledMaterialIndices[0] = materialIndices[0];
        }

        // FIXME:
        // use compact instead of atomicAdd
        culledDrawCommands[atomicAdd(culledDrawIndirectCount, 1)] = drawCommand;
    }
}
