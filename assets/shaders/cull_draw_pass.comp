#version 460

layout(constant_id = 0) const uint LOCAL_SIZE_X = 1;
layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

struct DrawCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 0) readonly buffer DrawCommands { DrawCommand drawCommands[]; };

layout(push_constant) uniform constants { uint indirectDrawCount; };

layout(set = 0, binding = 1) coherent buffer CulledDrawIndirectCount { uint culledDrawIndirectCount; };

layout(set = 0, binding = 2) buffer CulledDrawCommands { DrawCommand culledDrawCommands[]; };

layout(set = 0, binding = 3) buffer PrefixSum { uint prefixSum[]; };

layout(set = 0, binding = 4) buffer MaterialIndices { uint materialIndices[]; };

layout(set = 0, binding = 5) buffer CulledMaterialIndices { uint culledMaterialIndices[]; };

uint visibleInstances(uint di) {
    DrawCommand draw_cmd = drawCommands[di];
    return prefixSum[draw_cmd.firstInstance + draw_cmd.instanceCount] - prefixSum[draw_cmd.firstInstance];
}

void main() {
    uint drawIndex = gl_GlobalInvocationID.x;
    if (drawIndex >= indirectDrawCount) {
        return;
    }
    uint visibleInstanceCount = visibleInstances(drawIndex);
    if (visibleInstanceCount > 0) {
        DrawCommand drawCommand = drawCommands[drawIndex];
        drawCommand.instanceCount = visibleInstanceCount;
        // NOTE:
        // convert to buffer index with - 1
        if (drawCommand.firstInstance != 0) {
            uint newIndex = prefixSum[drawCommand.firstInstance - 1];
            culledMaterialIndices[newIndex] = materialIndices[drawCommand.firstInstance];
            drawCommand.firstInstance = newIndex;
        } else {
            culledMaterialIndices[0] = materialIndices[0];
        }

        // FIXME:
        // use compact instead of atomicAdd
        culledDrawCommands[atomicAdd(culledDrawIndirectCount, 1)] = drawCommand;
    }
}
