#version 460

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct DrawCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 0) readonly buffer DrawCommands { DrawCommand drawCommands[]; };

layout(push_constant) uniform constants { uint indirectDrawCount; };

layout(set = 0, binding = 1) coherent buffer CulledDrawIndirectCount { uint culledDrawIndirectCount; };

layout(set = 0, binding = 2) buffer CulledDrawCommands { DrawCommand culledDrawCommands[]; };

layout(binding = 3) buffer GlobalCounter { uint globalCounter; };

/*
 * FIXME:
 * use compact here as well
layout(set = 1, binding = 0) buffer VisibilityBuffer { uint visibilityBuffer[]; };
layout(set = 1, binding = 1) buffer BlockCounts { uint blockCounts[]; };
*/

layout(set = 0, binding = 3) buffer PrefixSum { uint prefixSum[]; };

uint visibleInstances(uint di) {
    uint count;
    if (di != 0) {
        // prefixSum has an entry for each instance and is kept in order
        // prefixSum[drawCommands[di].instanceCount - 1] is the sum of all visible instances inclusive
        // prefixSum[drawCommands[di - 1].instanceCount - 1] is the sum of all visible instances of the previous draw, inclusive
        // their difference is the number of visible instances of drawCommands[di]
        DrawCommand currDraw = drawCommands[di];
        DrawCommand prevDraw = drawCommands[di - 1];
        // FIXME:
        // this is wrong, needs to be offset by sum of previous instance counts
        count = prefixSum[globalCounter + currDraw.instanceCount - 1] - prefixSum[globalCounter + prevDraw.instanceCount - 1];
    } else {
        count = prefixSum[drawCommands[di].instanceCount - 1];
    }
    atomicAdd(globalCounter, count);
    return count;
}

void main() {
    uint drawIndex = gl_GlobalInvocationID.x;
    if (drawIndex >= indirectDrawCount) {
        return;
    }
    uint visibleInstanceCount = visibleInstances(drawIndex);
    if (visibleInstanceCount > 0) {
        DrawCommand drawCommand = drawCommands[drawIndex];
        // FIXME:
        // visibleInstanceCount seems to be too large and causes a device loss
        drawCommand.instanceCount = visibleInstanceCount;
        drawCommand.instanceCount = 1;

        // FIXME:
        // use compact instead of atomicAdd
        culledDrawCommands[atomicAdd(culledDrawIndirectCount, 1)] = drawCommand;
    }
}
