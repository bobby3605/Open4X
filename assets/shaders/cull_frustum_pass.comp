#version 460
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct InstanceData {
    uint objectIndex;
};

struct ObjectData {
    mat4 modelMatrix;
};

layout(set = 0, binding = 0) readonly buffer Instances { InstanceData instances[]; };

layout(push_constant) uniform constants {
    uint totalInstanceCount;
    float nearD;
    float farD;
    float ratio;
    float sphereFactorX;
    float sphereFactorY;
    float tang;
    vec3 X;
    vec3 Y;
    vec3 Z;
    vec3 camPos;
};

layout(std140, set = 0, binding = 1) readonly buffer Objects { ObjectData objects[]; };
layout(set = 0, binding = 2) buffer VisibleInstances { InstanceData visibleInstances[]; };

layout(set = 0, binding = 3) buffer PrefixSum { uint prefixSum[]; };
layout(set = 0, binding = 4) buffer GlobalCounter { uint globalCounter; };

// radar frustum culling implementation from
// http://www.lighthouse3d.com/tutorials/view-frustum-culling/radar-approach-implementation-ii/
bool sphereInFrustum(vec3 p, float radius) {

    float d;
    float az, ax, ay;
    bool result = true;

    vec3 v = p - camPos;

    az = dot(v, -Z);
    if (az > farD + radius || az < nearD - radius)
        return false;

    if (az > farD - radius || az < nearD + radius)
        result = true;

    ay = dot(v, Y);
    d = sphereFactorY * radius;
    az *= tang;
    if (ay > az + d || ay < -az - d)
        return false;

    if (ay > az - d || ay < -az + d)
        result = true;

    ax = dot(v, X);
    az *= ratio;
    d = sphereFactorX * radius;
    if (ax > az + d || ax < -az - d)
        return false;

    if (ax > az - d || ax < -az + d)
        result = true;

    return (result);
}

bool isVisible(uint index) {
    InstanceData instance = instances[index];
    mat4 modelMatrix = objects[instance.objectIndex].modelMatrix;
    mat4 modelMatrixT = transpose(modelMatrix);
    float xScale = length(modelMatrixT[0]);
    float yScale = length(modelMatrixT[1]);
    float zScale = length(modelMatrixT[2]);
    vec3 center = vec3(modelMatrix[3]);
    // might not work for radius because objects have different scaling
    // some models might have a much larger or smaller scale than others in order to be reasonably sized
    // this would make the radius too large or too small
    // need to convert scale from model space to world space?
    float radius = max(xScale, max(yScale, zScale)) * 0.5;
    return sphereInFrustum(center, radius);
}

// https://gpuopen.com/learn/fast-compaction-with-mbcnt/
shared uint sharedCounter;
shared uint sharedSubgroupOutputSlot;
shared uint sharedLocalgroupOutputSlot;
void main() {
    if (gl_SubgroupInvocationID.x == 0) {
        sharedCounter = 0;
    }

    barrier();

    uint index = gl_GlobalInvocationID.x;
    InstanceData instance = instances[index];
    bool laneActive = isVisible(index) ? true : true;
    uint subgroupBitCount = subgroupBallotBitCount(subgroupBallot(laneActive));
    uint laneOutputSlot = subgroupBallotInclusiveBitCount(subgroupBallot(laneActive));

    if (gl_SubgroupInvocationID.x == 0) {
        sharedSubgroupOutputSlot = atomicAdd(sharedCounter, subgroupBitCount);
    }

    barrier();

    if (gl_LocalInvocationID.x == 0) {
        sharedLocalgroupOutputSlot = atomicAdd(globalCounter, sharedCounter);
    }

    barrier();

    // prefixSum[index] = sharedLocalgroupOutputSlot + laneOutputSlot + sharedSubgroupOutputSlot;
    prefixSum[index] = index;

    if (laneActive) {
        //        visibleInstances[sharedLocalgroupOutputSlot + laneOutputSlot + sharedSubgroupOutputSlot] = instance;
        visibleInstances[index] = instance;
    }
}
