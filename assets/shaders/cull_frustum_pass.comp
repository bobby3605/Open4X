#version 460
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require

layout(constant_id = 0) const uint LOCAL_SIZE_X = 1;
layout(constant_id = 1) const uint SUBGROUP_SIZE = 0;
layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

struct InstanceData {
    uint objectIndex;
    uint materialIndex;
};

struct ObjectData {
    mat4 modelMatrix;
};

layout(set = 0, binding = 0) readonly buffer Instances { InstanceData instances[]; };

layout(push_constant) uniform constants {
    uint totalInstanceCount;
    float nearD;
    float farD;
    float ratio;
    float sphereFactorX;
    float sphereFactorY;
    float tang;
    vec3 X;
    vec3 Y;
    vec3 Z;
    vec3 camPos;
};

layout(std140, set = 0, binding = 1) readonly buffer Objects { ObjectData objects[]; };
layout(set = 0, binding = 2) buffer VisibleInstances { InstanceData visibleInstances[]; };

layout(set = 0, binding = 3) buffer PrefixSum { uint prefixSum[]; };
layout(set = 0, binding = 4) buffer LocalGroupTotals { uint localgroupTotals[]; };

// radar frustum culling implementation from
// http://www.lighthouse3d.com/tutorials/view-frustum-culling/radar-approach-implementation-ii/
bool sphereInFrustum(vec3 p, float radius) {

    float d;
    float az, ax, ay;
    bool result = true;

    vec3 v = p - camPos;

    az = dot(v, -Z);
    if (az > farD + radius || az < nearD - radius)
        return false;

    if (az > farD - radius || az < nearD + radius)
        result = true;

    ay = dot(v, Y);
    d = sphereFactorY * radius;
    az *= tang;
    if (ay > az + d || ay < -az - d)
        return false;

    if (ay > az - d || ay < -az + d)
        result = true;

    ax = dot(v, X);
    az *= ratio;
    d = sphereFactorX * radius;
    if (ax > az + d || ax < -az - d)
        return false;

    if (ax > az - d || ax < -az + d)
        result = true;

    return (result);
}

bool isVisible(uint index) {
    InstanceData instance = instances[index];
    mat4 modelMatrix = objects[instance.objectIndex].modelMatrix;
    mat4 modelMatrixT = transpose(modelMatrix);
    float xScale = length(modelMatrixT[0]);
    float yScale = length(modelMatrixT[1]);
    float zScale = length(modelMatrixT[2]);
    vec3 center = vec3(modelMatrix[3]);
    // might not work for radius because objects have different scaling
    // some models might have a much larger or smaller scale than others in order to be reasonably sized
    // this would make the radius too large or too small
    // need to convert scale from model space to world space?
    float radius = max(xScale, max(yScale, zScale)) * 0.5;
    return sphereInFrustum(center, radius);
}

// NOTE:
// gl_WorkGroupSize is a compile-time constant, but gl_SubgroupSize isn't
// should be equal to gl_NumSubgroups
shared uint subgroupTotals[gl_WorkGroupSize.x / SUBGROUP_SIZE];
shared uint workgroupOffset;
shared uint i;
void main() {
    if (gl_LocalInvocationID.x == 0) {
        i = 0;
        workgroupOffset = 0;
    }
    memoryBarrierShared();
    barrier();

    // TODO:
    // This can surely be improved,
    // but it is sufficient for now
    // Currently culls ~950,000 instances in ~1ms with a local size of 1024 on my 6800xt
    while (i < totalInstanceCount) {
        uint index = gl_LocalInvocationID.x + i;
        InstanceData instance = instances[index];
        bool laneActive = index < totalInstanceCount && isVisible(index);
        uint inclusiveCount = subgroupBallotInclusiveBitCount(subgroupBallot(laneActive));

        if (gl_SubgroupInvocationID == (SUBGROUP_SIZE - 1)) {
            subgroupTotals[gl_SubgroupID] = inclusiveCount;
        }

        memoryBarrierShared();
        barrier();

        // FIXME:
        // currently fails if gl_NumSubgroups > gl_SubgroupSize
        if (gl_LocalInvocationID.x < gl_NumSubgroups) {
            subgroupTotals[gl_LocalInvocationID.x] = subgroupInclusiveAdd(subgroupTotals[gl_LocalInvocationID.x]);
        }

        memoryBarrierShared();
        barrier();

        prefixSum[index] = workgroupOffset + (gl_SubgroupID == 0 ? 0 : subgroupTotals[gl_SubgroupID - 1]) + inclusiveCount;

        if (laneActive) {
            // NOTE:
            // - 1 to convert from inclusive to exclusive prefix sum
            visibleInstances[prefixSum[index] - 1] = instance;
        }

        if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1) {
            i += gl_WorkGroupSize.x;
            workgroupOffset = prefixSum[index];
        }

        memoryBarrierShared();
        barrier();
    }
}
